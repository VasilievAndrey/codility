package vav.codility.arrays.strings;

import org.junit.Test;

import static org.junit.Assert.*;

public class LargestUniqueNumberTest {

    @Test
    public void test() {
        assertEquals(8, new LargestUniqueNumber().largestUniqueNumber(new int[] {5,7,3,9,4,9,8,3,1}));
    }

    @Test
    public void test2() {
        assertEquals(11, new LargestUniqueNumber().largestUniqueNumber(new int[] {10,11,10}));
    }
    @Test
    public void test3() {
        assertEquals(-1, new LargestUniqueNumber().largestUniqueNumber(new int[] {9,9,8,8}));
    }

    @Test
    public void test4() {
        assertEquals(999, new LargestUniqueNumber().largestUniqueNumber(new int[] {438,971,86,333,820,663,817,234,922,368,638,380,663,629,753,23,22,738,726,282,884,648,841,112,833,131,952,169,976,715,359,532,367,227,28,622,16,963,697,751,592,184,996,760,451,592,4,0,614,566,374,155,381,136,869,364,363,145,419,33,890,335,768,499,514,947,242,911,110,680,837,290,42,608,121,83,166,477,440,234,839,508,200,235,308,989,914,422,981,625,77,273,351,486,971,467,190,585,944,188,74,207,650,155,220,169,900,298,788,980,488,694,996,985,389,86,912,198,539,552,525,690,922,283,657,879,30,62,824,878,368,809,323,850,930,516,313,992,891,745,10,886,455,269,972,46,710,50,45,222,667,734,813,901,784,475,792,172,853,754,446,87,376,972,919,442,376,835,708,604,531,663,60,949,654,848,286,162,762,491,656,804,192,287,968,389,820,977,922,22,396,40,566,810,272,233,542,884,831,5,982,926,98,8,449,823,626,766,32,638,661,333,634,65,891,427,769,89,818,28,277,403,535,587,157,847,229,817,146,34,16,532,5,333,116,420,797,570,75,315,458,847,487,12,659,912,684,275,892,568,52,515,725,204,710,343,461,686,10,290,278,818,752,939,812,344,324,406,176,659,120,361,44,419,563,552,8,789,460,813,36,27,234,510,89,238,800,713,881,719,461,774,893,752,474,622,291,829,841,733,134,489,734,926,70,416,619,723,818,605,5,647,618,868,859,189,338,134,688,138,876,970,88,553,341,526,904,229,367,872,921,310,351,825,234,902,805,68,696,999,686,530,674,92,430,208,689,553,666,691,191,961,199,558,666,917,405,25,126,654,535,211,183,712,110,327,868,308,445,534,178,209,632,673,340,229,381,759,971,310,778,523,177,871,443,254,146,804,669,431,452,252,311,225,401,630,940,255,103,885,860,71,826,237,765,138,57,528,426,55,874,621,136,642,429,746,842,600,970,846,297,63,603,514,251,694,754,450,685,759,382,571,179,778,407,689,829,901,544,835,907,796,776,977,339,4,896,925,4,966,6,209,762,350,283,132,286,742,855,636,314,265,96,618,525,313,619,573,76,646,30,178,693,364,150,434,982,773,268,335,633,495,318,569,982,515,884,9,846,444,485,671,312,589,785,843,21,992,67,673,900,695,395,726,827,57,621,539,773,542,556,377,353,92,818,984,449,647,612,714,794,274,665,683,662,205,670,754,335,168,410,121,583,189,31,240,605,117,986,21,81,375,439,946,859,156,69,35,551,102,221,278,440,795,288,701,600,100,441,920,526,980,972,30,766,312,73,48,732,943,444,53,124,687,838,193,719,747,361,28,718,336,722,681,607,595,557,921,886,711,762,226,514,370,563,496,232,393,495,998,428,787,53,472,765,565,447,89,976,848,617,417,708,381,792,135,805,685,657,220,333,499,850,674,211,881,836,156,745,862,465,706,947,153,211,230,937,137,704,835,323,446,853,821,133,153,337,317,877,56,682,642,916,196,346,593,475,277,955,359,92,836,713,263,901,492,250,238,44,753,941,250,729,105,137,498,193,603,490,152,765,772,468,620,51,420,705,723,252,506,185,396,854,94,882,623,457,298,969,973,979,475,196,7,983,446,431,656,163,623,19,284,404,727,136,158,141,448,941,521,972,903,790,508,19,131,888,50,653,518,874,956,329,537,116,275,742,169,797,732,270,456,498,627,499,62,730,631,144,894,619,662,377,372,22,490,742,337,68,271,810,173,540,444,620,266,819,237,519,342,666,133,468,949,998,835,152,419,462,900,454,163,706,598,445,50,51,281,587,975,437,648,557,366,875,973,917,724,82,373}));
    }

}
